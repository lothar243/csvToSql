/***
 From here and forward the lex files included have the
 sole purpose of interpreting tokens to send forward to
 bison. In the bison files, further work is done with
 defined grammar rules comprised of the tokens and
 their data values returned here.
***/

%x INCELL
%x QUOTEINCELL
%{
#include <string>
#include "interpreter.tab.h"

#define YY_DECL extern "C" int yylex()
int singleQuoteCount = 0;
int doubleQuoteCount = 0;

%}
%option noyywrap
/***
 Each rule returns a token identifier which is generated by bison
 and is defined in the interpreter.tab.h file. yylval is a union
 of possible data types defined in the bison file. We convert
 the value of the int or string matches and store it within the
 union structure.
***/
%%

\n			{ return EOL; }
\"			{ BEGIN INCELL; }
,			{ return COMMA; }
[^,|^\"|^\n]*	{
					yylval.sVal = strdup(yytext);
					return CELLCONTENTS; 
				}
<INCELL>([^"])*\"	{
					yylval.sVal = strdup(yytext);
					yylval.sVal[strlen(yylval.sVal) - 1] = '\0';  // erase the ending quote
					BEGIN QUOTEINCELL;
					return CELLCONTENTS;
}
<QUOTEINCELL>\" { //an escaped quote has been encountered
  BEGIN INCELL;
  return QUOTE;
}
<QUOTEINCELL>[ \t]*, { //the cell was closed - ignore whitespace between closing quote and comma
  BEGIN INITIAL;
  return COMMA;
}


%%
